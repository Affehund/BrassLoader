import io.github.brassmc.bradle.task.DownloadMCTask
import io.github.brassmc.bradle.task.RemapJarTask
import java.nio.file.Files

plugins {
    id 'java'
    id 'io.github.brassmc.bradle' version '0.3.0'
}

repositories {
    mavenCentral()

    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = "ASM"
        url = "https://repository.ow2.org/nexus/content/repositories/releases"
    }
}

minecraft {
    minecraftVersion = '1.19.1'
}

configurations {
    boot
}

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.jetbrains:annotations:23.0.0'

    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-tree:9.3'

    boot 'cpw.mods:bootstraplauncher:1.1.2'
    boot 'cpw.mods:securejarhandler:2.1.4'

    compileOnly 'cpw.mods:securejarhandler:2.1.4'
    minecraftRuntime 'cpw.mods:modlauncher:10.0.8'

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}

testing {
    suites {
        test {
            useJUnit('4.13.2')
        }
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.create('downloadMcClient', DownloadMCTask) {
    group = 'minecraft'
    side = 'client'
    output = project.file('run/client.jar')
}
tasks.create('remapMcClient', RemapJarTask) {
    group = 'minecraft'
    from(downloadMcClient)
}

tasks.create('downloadMcServer', DownloadMCTask) {
    group = 'minecraft'
    side = 'server'
    output = project.file('run/server.jar')
}
tasks.create('remapMcServer', RemapJarTask) {
    group = 'minecraft'
    from(downloadMcServer)
}

jar {
    manifest.attributes([
            'Automatic-Module-Name': 'io.github.brassmc.brassloader'
    ])
}

final legacyCpPath = project.file("$buildDir/resources/main/mc_cp.txt").toPath().toAbsolutePath()

processResources {
    doLast {
        final lines = configurations.minecraftRuntime.resolve().stream()
                .map { it.toPath().toAbsolutePath().toString() }
                .toList()
        final outPath = legacyCpPath
        lines.add(jar.archiveFile.get().asFile.toString())
        Files.createDirectories(outPath.parent)
        Files.write(outPath, lines)
    }
}

//noinspection GroovyAssignabilityCheck
final var configureRunTask = { JavaExec it ->
    it.dependsOn('jar')
    it.getMainClass().set('cpw.mods.bootstraplauncher.BootstrapLauncher')
    final sshModule = 'cpw.mods.securejarhandler'
    it.jvmArgs(
            '--module-path', configurations.boot.resolve().stream().map { it.toString() }.toList().join(';'),
            "-DlegacyClassPath.file=$legacyCpPath",
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-opens', "java.base/java.util.jar=$sshModule",
            '--add-opens', "java.base/java.lang.invoke=$sshModule",
            '--add-exports', "java.base/sun.security.util=$sshModule",
            '--add-exports', 'jdk.naming.dns/com.sun.jndi.dns=java.naming'
    )
    it.group = 'minecraft'

    Files.createDirectories(it.workingDir.toPath())
}

tasks.create('runClient', JavaExec) {
    setWorkingDir(project.file('run/client'))
    jvmArgs(
            "-Dbrassloader.mclocation=${project.file('run/client_mapped.jar')}"
    )
    args(
            '--launchTarget', 'brass:mcclient',
            '--accessToken', '***',
            '--version', '1.19.1'
    )
    configureRunTask(it)
}
tasks.create('runServer', JavaExec) {
    setWorkingDir(project.file('run/server'))
    jvmArgs(
            "-Dbrassloader.mclocation=${project.file('run/server_mapped.jar')}"
    )
    args(
            '--launchTarget', 'brass:mcserver',
    )
    configureRunTask(it)
}